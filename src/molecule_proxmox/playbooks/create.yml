---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  collections:
    - community.general
  vars:
      options: "{{ molecule_yml.driver.options }}"
  tasks:
    - name: "Load proxmox secrets."
      include_vars: "{{ options.proxmox_secrets }}"
      when: options.proxmox_secrets is defined
      no_log: true

    - name: "Create molecule instance(s)."
      proxmox_kvm:
        state: present
        api_host: "{{ api_host | d(options.api_host) | d(omit) }}"
        api_user: "{{ api_user | d(options.api_user) | d(omit) }}"
        api_password: "{{ api_password | d(options.api_password) | d(omit) }}"
        api_token_id: "{{ api_token_id | d(options.api_token_id) | d(omit) }}"
        api_token_secret: "{{ api_token_secret | d(options.api_token_secret) | d(omit) }}"
        vmid: "{{ vm.proxmox_template_vmid | d(vm.template_vmid, true) | d(omit, true) }}"
        clone: "{{ vm.proxmox_template_name | d(vm.template_name, true) | d(options.template_name, true) | d('molecule', true) }}"
        name: "{{ vm.name }}"
        node: "{{ options.node }}"
        timeout: 300
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        loop_var: vm
      register: proxmox_clone

    - name: "Start molecule instance(s)."
      proxmox_qemu_agent:
        api_host: "{{ api_host | d(options.api_host) | d(omit) }}"
        api_user: "{{ api_user | d(options.api_user) | d(omit) }}"
        api_password: "{{ api_password | d(options.api_password) | d(omit) }}"
        api_token_id: "{{ api_token_id | d(options.api_token_id) | d(omit) }}"
        api_token_secret: "{{ api_token_secret | d(options.api_token_secret) | d(omit) }}"
        vmid: "{{ vmid }}"
      loop: "{{ proxmox_clone.results | map(attribute='vmid') }}"
      loop_control:
        loop_var: vmid
      register: qemu_query

    - name: "Populate instance configs."
      set_fact:
        instance_config:
          instance: "{{ vm.name }}"
          address: "{{ vm.addresses[0] }}"
          user: "{{ options.ssh_user | d('molecule') }}"
          port: 22
          identity_file: "{{ options.ssh_identity_file }}"
          vmid: "{{ vm.vmid }}"
      loop: "{{ qemu_query.results | map(attribute='vm') }}"
      loop_control:
        loop_var: vm
      register: instance_configs

    - name: "Write instance configs."
      copy:
        content: "{{ instance_configs.results | map(attribute='ansible_facts.instance_config') | to_nice_yaml }}"
        dest: "{{ molecule_instance_config }}"
